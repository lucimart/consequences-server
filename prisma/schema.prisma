// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model Post {
  id        	Int      @id @default(autoincrement())
  createdAt 	DateTime @default(now())
  author    	User     @relation(fields: [authorId], references: [id])
  authorId  	Int
  group     	Group    @relation(fields: [groupId], references: [id])
  groupId   	Int
  text      	Text?
  image     	Image?
  votes     	Vote[]
  votesCount	Int @default(0)
  replies   	Reply[]
  parent    	Post?    @relation("ParentChildren", fields: [parentId], references: [id])
  parentId  	Int?
  children  	Post[]   @relation("ParentChildren")
  isRoot		Boolean	@default(false)
}

model Image {
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  imageUrl String
}

model Text {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  body   String @db.VarChar(255)
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  body      String   @db.VarChar(500)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  votes     Vote[]
  votesCount	Int @default(0)
  parent    Reply?   @relation("ChildrenParent", fields: [parentId], references: [id])
  parentId  Int?
  children  Reply[]  @relation("ChildrenParent")
}

model Profile {
  bio       String? @db.VarChar(500)
  instagram String?
  twitter   String?
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @id
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String   @unique @db.VarChar(20)
  posts    Post[]
  profile  Profile?
  role     Role     @default(USER)
  ownerOf  Group[]
  memberOf Member[]
  votes    Vote[]
  votesCount	Int @default(0)
  replies  Reply[]
}

model Group {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(40)
  private Boolean  @default(false)
  members Member[]
  posts   Post[]
  owner   User     @relation(fields: [userId], references: [id])
  userId  Int
}

model Member {
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @id
  group       Group   @relation(fields: [groupId], references: [id])
  groupId     Int
  write       Boolean @default(false)
  isModerator Boolean @default(false)
}

model Vote {
  id      Int    @id @default(autoincrement())
  post    Post?  @relation(fields: [postId], references: [id])
  postId  Int?
  reply   Reply? @relation(fields: [replyId], references: [id])
  replyId Int?
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

enum Role {
  USER
  ADMIN
}
